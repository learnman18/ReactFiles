so the step is we pass the props and goes to that particular file , It's parent to child
so child can easily access the props and its value.

in the below handleDelete example we have passed a props along with the argument so when the
function is created it can access the argument that is 'i' in the example.

so the flow is 

app.js - It's parent of all comp
TheApp.js - all the child comps are called in this comp and porps are also passed for the comps.
Header - 
CreateNotes - 
Notes - 

suppose now Notes comp has been called so Notes.js comp can access all the props which we has passed from 
TheApp.js file which a parent file.

so we have a passed a function as props 'handleDelete={()=>deleteItem(i)}' in Notes comp in theApp.js file along with the argument,
and it works onCLick event in the notes.js file, since notes.js has already it acesss it as props
i.e 'onClick={props.handleDelete}' , it has the all the data and when user clicks on the button the click
event gets triggred and 'const deleteItem' function gets called in theApp.js file.

return(
        <>
            <Header></Header>
            <CreateNotes test={AddNotes}></CreateNotes>
            <br /><br />
            {
                addItem.map((curVal , i)=>{
                    console.log("curVal" , curVal);
                    if(curVal.Title !== "" && curVal.Content !== ""){
                        return <Notes key={i} id={i} 
                                title={curVal.Title} content={curVal.Content} 
                                handleDelete={()=>deleteItem(i)}></Notes>
                    }else{
                        return null;
                    }
                })
            }
        </>
    )

-----------------------------

    const inputChngEvent = (event)=>{
        // console.log(event.target.value);
        const {name , value} = event.target
        // we have destructured name and value here it is same as value = event.target.value & same goes for name

        setNotes((previouValues)=>{
            // console.log("prvous value" , previouValues);
            return {...previouValues , [name] : value}
            /*so here it checks what is the value we have in the name field in the input & textarea we have name
            so in the input and textareas we have Title and Contnet, after checking it compares
            the objects we have created in the useState, both the name and object name should be similar 
            and if it is similar it assign the value in it, it both names are not similiar it creates
            new object.
            */
            
        })
        console.log(notes)

    }


     const AddItToNotes = ()=>{
        props.test(notes);
        //passing notes as object parameter so it can be access on TheApp.js page, notes has all the 
        values we have entered in title and content field.
        setNotes({
            Title:'',
            Content:''
        })
        //this is used to make the title and content field empty once you click the button to add the notes
    }